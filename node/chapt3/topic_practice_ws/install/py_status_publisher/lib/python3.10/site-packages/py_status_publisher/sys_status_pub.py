import rclpy
# 导入 自定义消息接口库 中 的 消息接口
from status_interfaces.msg import SystemStatus
# 导入 节点库
from rclpy.node import Node
# 导入 获取系统的信息 库
import psutil
import platform

# 定义 节点类
class SysStatusPub(Node):
    def __init__(self,node_name):
        # 注意： 一定要 调用 父类的 __init__函数！！！！！
        super().__init__(node_name)
        
        # 创建 发布者对象 status_publisher_
        self.status_publisher_ = self.create_publisher(SystemStatus,'Sys_Status',10)
        # 创建 定时器对象：用于 隔一段时间 发布一次
        self.timer_ = self.create_timer(1.0 , self.timer_callback)  # 需 调用 自己成员函数（self） 中的 回调函数（.timer_callback）

    # 定义 回调函数：获取 系统信息 并 发布
    def timer_callback(self):
        # 创建 对象 来 获取 CPU的 使用率
        cpu_percent = psutil.cpu_percent()      # CPU使用率：psutil.cpu_percent()  
        # 创建 对象 来 获取 内存的 相关信息
        memory_info = psutil.virtual_memory()
        # 创建 对象 来 获取 网络 IO相关信息
        net_io_counters = psutil.net_io_counters()
        '''
        自定义 消息接口 类 中 需要发布 的 内容
        builtin_interfaces/Time stamp       # 记录 时间辍
        string host_name                    # 系统 主机 的 名字
        float32 cpu_percent                 # CPU 使用率
        float32 memory_percent              # 内存 使用率
        float32 memory_total                # 内存 总大小
        float32 memory_available            # 剩余 内存大小
        float64 net_sent                    # 网络 数据 发送 总量  1 MB = 8MB
        float64 net_recv                    # 网络 数据 接收 总量
        '''
        # 创建 消息对象 ：[ 发布者 发布的是 消息接口类SystemStatus 的 对象 ] 
        msg = SystemStatus()
        msg.stamp = self.get_clock().now().to_msg()               # 赋值 时间辍：获取 当前 时钟（self.get_clock().now()） 并转换成 消息（.to_msg()）
        msg.host_name = platform.node()                         # 赋值 主机名字： 获取 计算机网络名字（platform.node()）
        msg.cpu_percent = cpu_percent                           # 赋值 CPU使用率
        msg.memory_percent = memory_info.percent                # 赋值 内存使用率 ： 获取 内存使用率的百分比（memory_info.percent）
        msg.memory_total = memory_info.total/1024/1024          # 赋值 内存总大小【单位：MB】
        msg.memory_available = memory_info.available/1024/1024  # 赋值 内存剩余大小【单位：MB】
        msg.net_sent = net_io_counters.bytes_sent/1024/1024     # 赋值 网络数据发送量【单位：MB/s】： 1字节/1024 = 1 kb / 1024 = 1 MB
        msg.net_recv = net_io_counters.bytes_recv/1024/1024     # 赋值 网络数据接收量【单位：MB/s】：

        # 打印 检查: 
        self.get_logger().info(f'发布{str(msg)}')               # str(msg)为 将 msg 强制转换成 string类型

        # 发布 消息：将 msg消息对象 放入 .publish(中)
        self.status_publisher_.publish(msg)

# 主函数
def main():
    rclpy.init()
    
    node = SysStatusPub('sys_status_pub')       # 将 节点类 实例化

    rclpy.spin(node)            # 运行节点

    rclpy.shutdown()            # 关闭节点 清理内存
